cat > example1.yaml
    5  kubectl create -f example1.yaml
    6  kubectl get pods 
    7  kubectl get po
    8  kubectl get po -o wide 
    9  kubectl describe pod tomcat-pod 
   10  kubectl get po -o wide 
   11  ping 192.168.1.4
   12  kubectl exec -it tomcat-pod -- /bin/sh
   13  kubectl delete pod tomcat-pod 
   14  kubectl delete -f example1.yaml




01) #Create a new pod called admin-pod with image busybox. Allow it to be able to set system_time. Container should sleep for 3200 seconds.



 4  alias g=kubectl 
    5  g get nodes 
    6  g run admin-pod --image=busybox --dry-run=client -o yaml --command sleep 3200
    7  g run admin-pod --image=busybox --dry-run=client -o yaml --command sleep 3200 | tee example2.yml
    8  kubectl create -f admin-pod.yml
    9  kubectl create -f example2.yml
   10  kubectl get po 
   11  kubectl describe pod admin-pod 
   
   
   
   
   
   
   
   
   
   13  cat > example3.yaml
   14  kubectl create -f example3.yaml
   15  kubectl get pods 
   16  kubectl delete -f example2.yml
   17  kubectl get pods 
   18  kubectl get po -o wide 
   19  kubectl describe rc tomcat-rc 
   20  kubectl scale rc tomcat-rc --replicas=9
   21  kubectl describe rc tomcat-rc 
   22  kubectl get po -o wide 
   23  kubectl scale rc tomcat-rc --replicas=3
   24  kubectl get po -o wide 
   25  kubectl delete rc tomcat-rc 
   26  kubectl get po -o wide 
   
   
   
   
    4  kubectl run tomcat-pod1 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
    5  kubectl get po -o wide 
    6  kuectl get rc 
    7  kubectl get rc 
    8  kuectl get rc 
    9  kubectl get po -o wide 
   10  kubectl run tomcat-pod2 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
   11  kubectl run tomcat-pod3 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
   12  kubectl get po -o wide 
   13  cat > example3.yaml
   14  kubectl create -f example3.yaml
   15  kubectl get po -o wide 
   16  kubectl describe rc tomcat-rc 
   17  kubectl delete pod tomcat-pod2
   18  kubectl get po -o wide 
   
   
   
   
   21  kubectl delete rc tomcat-rc 
   22  kubectl get rc 
   23  kubectl get po -o wide 
   24  kubectl run tomcat-pod1 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
   25  kubectl run tomcat-pod2 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
   26  kubectl run tomcat-pod3 --image=centos  --labels=app=tomcat-app
   27  kubectl get po 
   28  kubectl create -f example3.yaml
   29  kubectl get po -o wide 
   30  kubectl describe rc tomcat-rc 
   31  kubectl delete pod tomcat-pod3
   32  kubectl get po -o wide 
   33  history 
   
   
   
   
   
   REPLICATION CONTROLLER - EQUALITY BASED SELECTION 


REPLICA SETS - USES EQUALITY BASED AND SET BASED SELECTIONS 


EQUALITY BASED SELECTION 
------------------------

OPERATORS : =, ==, !=

EXAMPLES :

Environment = production 
Tier != frontend 


COMMAND LINE 

kubectl get pods -l environment=production 


IN MANIFEST 
-----------


selector :
  environment : production 
  tier : frontend 


SUPPORTED AREA IN K8S 
---------------------

SERVICES, REPLICATION CONTROLLER




SET BASED SELECTION 
-------------------

OPERATORS :
In, not in, exists 


EXAMPLES 

environment in (production, qa, dev)
tier not in (frontend, backend)


COMMANDLINE 
-----------

kubectl get pods -l "environment in (production)"


IN MANIFEST 
-----------


selector :
  matchExpressions :
     - { key : environment, operator : in, values : [prod, qa] }
     - {key : tier, operator : notin, values : [frontend, backend]}

SUPPORTED AREA IN K8S 
---------------------

JOB, DEPLOYMENT, REPLICASETS, DAEMONSETS 







 4  cat > example5.yaml
    5  kubectl create -f example5.yaml
    6  kubectl get po -o wide 
    7  kubectl get po -l tier=frontend
    8  kubectl get rs 
    9  kubectl describe rs tomcat-rs 
   10  kubectl scale rs tomcat-rs --replicas=9
   11  kubectl get po -o wide 
   12  kubectl scale rs tomcat-rs --replicas=3
   13  kubectl get po -o wide 
   14  kubectl delete -f example5.yaml
